#############################################################################
# Makefile for building: CWebSocketServer
# Generated by qmake (3.0) (Qt 5.5.1)
# Project:  CWebSocketServer.pro
# Template: app
# Command: /home/caelum/Qt5.5.1/5.5/gcc_64/bin/qmake -spec linux-g++ CONFIG+=debug -o Makefile CWebSocketServer.pro
#############################################################################

MAKEFILE      = Makefile

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = 
CFLAGS        = -pipe -g -Wall -W -fPIC $(DEFINES)
CXXFLAGS      = -pipe -g -std=c++0x -Wall -W -fPIC $(DEFINES)
INCPATH       = -I. -I../../Qt5.5.1/5.5/gcc_64/mkspecs/linux-g++
QMAKE         = /home/caelum/Qt5.5.1/5.5/gcc_64/bin/qmake
DEL_FILE      = rm -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p
COPY          = cp -f
COPY_FILE     = cp -f
COPY_DIR      = cp -f -R
INSTALL_FILE  = install -m 644 -p
INSTALL_PROGRAM = install -m 755 -p
INSTALL_DIR   = cp -f -R
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
TAR           = tar -cf
COMPRESS      = gzip -9f
DISTNAME      = CWebSocketServer1.0.0
DISTDIR = /home/caelum/qt_project/CWebSocketServer/obj/CWebSocketServer1.0.0
LINK          = g++
LFLAGS        = -Wl,-rpath,/home/caelum/Qt5.5.1/5.5/gcc_64
LIBS          = $(SUBLIBS)  
AR            = ar cqs
RANLIB        = 
SED           = sed
STRIP         = strip

####### Output directory

OBJECTS_DIR   = obj/

####### Files

SOURCES       = main.cpp \
		cserver.cpp \
		clog.cpp \
		crequest.cpp \
		cresponse.cpp \
		base64.cpp \
		sha1.cpp \
		cprotocol.cpp 
OBJECTS       = obj/main.o \
		obj/cserver.o \
		obj/clog.o \
		obj/crequest.o \
		obj/cresponse.o \
		obj/base64.o \
		obj/sha1.o \
		obj/cprotocol.o
DESTDIR       = #avoid trailing-slash linebreak
TARGET        = CWebSocketServer


first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)


all: Makefile $(TARGET)


clean: compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


distclean: clean 
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


####### Sub-libraries

check: first

compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

obj/main.o: main.cpp cserver.h \
		crequest.h \
		cresponse.h \
		sha1.h \
		base64.h \
		cprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/main.o main.cpp

obj/cserver.o: cserver.cpp cserver.h \
		crequest.h \
		cresponse.h \
		clog.h \
		cprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/cserver.o cserver.cpp

obj/clog.o: clog.cpp clog.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/clog.o clog.cpp

obj/crequest.o: crequest.cpp crequest.h \
		cprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/crequest.o crequest.cpp

obj/cresponse.o: cresponse.cpp cresponse.h \
		cprotocol.h \
		sha1.h \
		base64.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/cresponse.o cresponse.cpp

obj/base64.o: base64.cpp base64.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/base64.o base64.cpp

obj/sha1.o: sha1.cpp sha1.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/sha1.o sha1.cpp

obj/cprotocol.o: cprotocol.cpp cprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o obj/cprotocol.o cprotocol.cpp

####### Install

install:  FORCE

uninstall:  FORCE

FORCE:

